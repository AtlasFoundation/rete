{"version":3,"file":"rete.min.js","sources":["../src/engine/component.ts","../src/node.ts","../src/component.ts","../src/connection.ts","../src/control.ts","../src/core/emitter.ts","../src/io.ts","../src/input.ts","../src/core/validator.ts","../src/core/context.ts","../src/view/utils.ts","../src/core/events.ts","../src/view/drag.ts","../src/view/zoom.ts","../src/view/area.ts","../src/view/connection.ts","../src/view/control.ts","../src/view/socket.ts","../src/view/node.ts","../src/view/index.ts","../src/selected.ts","../src/events.ts","../src/editor.ts","../src/output.ts","../src/socket.ts","../src/engine/recursion.ts","../src/engine/state.ts","../src/engine/events.ts","../src/engine/index.ts","../src/index.ts"],"sourcesContent":["import { Engine } from './index';\nimport { NodeData, WorkerInputs, WorkerOutputs } from '../core/data';\n\nexport abstract class Component {\n\n    name: string;\n    data: unknown = {};\n    engine: Engine | null = null;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    abstract worker(node: NodeData, inputs: WorkerInputs, outputs: WorkerOutputs, ...args: unknown[]): void;\n}","import { Connection } from './connection';\nimport { Control } from './control';\nimport { Input } from './input';\nimport { Output } from './output';\nimport { InputsData, NodeData, OutputsData } from './core/data';\n\nexport class Node {\n\n    name: string;\n    id: number;\n    position: [number, number] = [0.0, 0.0];\n    inputs = new Map<string, Input>();\n    outputs = new Map<string, Output>();\n    controls = new Map<string, Control>();\n    data: {[key: string]: unknown} = {};\n    meta: {[key: string]: unknown} = {};\n\n    static latestId = 0;\n    \n    constructor(name: string) {\n        this.name = name;\n        this.id = Node.incrementId();\n    }\n\n    _add<T extends any>(list: Map<string, T>, item: any, prop: string) {\n        if (list.has(item.key))\n            throw new Error(`Item with key '${item.key}' already been added to the node`);\n        if (item[prop] !== null)\n            throw new Error('Item has already been added to some node');\n        \n        item[prop] = this;\n        list.set(item.key, item);\n    }\n\n    addControl(control: Control) {\n        this._add(this.controls, control, 'parent');\n        return this;\n    }\n\n    removeControl(control: Control) {\n        control.parent = null;\n\n        this.controls.delete(control.key);\n    }\n\n    addInput(input: Input) {\n        this._add(this.inputs, input, 'node');\n        return this;\n    }\n\n    removeInput(input: Input) {\n        input.removeConnections();\n        input.node = null;\n\n        this.inputs.delete(input.key);\n    }\n\n    addOutput(output: Output) {\n        this._add(this.outputs, output, 'node');\n        return this;\n    }\n\n    removeOutput(output: Output) {\n        output.removeConnections();\n        output.node = null;\n\n        this.outputs.delete(output.key);\n    }\n\n    getConnections() {\n        const ios = [...this.inputs.values(), ...this.outputs.values()];\n        const connections = ios.reduce((arr, io) => {\n            return [...arr, ...io.connections];\n        }, [] as Connection[]);\n\n        return connections;\n    }\n\n    update() {}\n\n    static incrementId() {\n        if (!this.latestId)\n            this.latestId = 1\n        else\n            this.latestId++\n        return this.latestId\n    }\n\n    static resetId() {\n        this.latestId = 0;\n    }\n\n    toJSON(): NodeData {\n        const reduceIO = <T extends any>(list: Map<string, Input | Output>) => {\n            return Array.from(list).reduce<T>((obj: any, [key, io]) => {\n                obj[key] = io.toJSON();\n                return obj;\n            }, {} as any)\n        }\n\n        return {\n            'id': this.id,\n            'data': this.data,\n            'inputs': reduceIO<InputsData>(this.inputs),\n            'outputs': reduceIO<OutputsData>(this.outputs),\n            'position': this.position,\n            'name': this.name\n        }\n    }\n\n    static fromJSON(json: NodeData) {\n        const node = new Node(json.name);\n        const [x, y] = json.position;\n\n        node.id = json.id;\n        node.data = json.data;\n        node.position = [x, y];\n        node.name = json.name;\n        Node.latestId = Math.max(node.id, Node.latestId);\n\n        return node;\n    }\n}\n","import { Component as ComponentWorker } from './engine/component';\nimport { Node } from './node';\nimport { NodeEditor } from './editor';\n\nexport abstract class Component extends ComponentWorker {\n\n    editor: NodeEditor | null = null;\n    data: unknown = {};\n\n    constructor(name: string) {\n        super(name);\n    }\n\n    abstract async builder(node: Node): Promise<void>;\n\n    async build(node: Node) {\n        await this.builder(node);\n\n        return node;\n    }\n\n    async createNode(data = {}) {\n        const node = new Node(this.name);\n        \n        node.data = data;\n        await this.build(node);\n\n        return node;\n    }\n}","import { Input } from './input';\nimport { Output } from './output';\n\nexport class Connection {\n\n    output: Output;\n    input: Input;\n    data: unknown = {};\n\n    constructor(output: Output, input: Input) {\n        this.output = output;\n        this.input = input;\n        this.data = {};\n\n        this.input.addConnection(this);\n    }\n\n    remove() {\n        this.input.removeConnection(this);\n        this.output.removeConnection(this);\n    }\n}","import { Input } from './input';\nimport { Node } from './node';\n\nexport class Control {\n\n    key: string;\n    data: unknown = {};\n    parent: Node | Input | null = null;\n\n    constructor(key: string) {\n        if (this.constructor === Control)\n            throw new TypeError('Can not construct abstract class');\n        if (!key)\n            throw new Error('The key parameter is missing in super() of Control ');\n\n        this.key = key;\n    }\n\n    getNode() {\n        if (this.parent === null)\n            throw new Error('Control isn\\'t added to Node/Input');   \n        \n        if (this.parent instanceof Node)\n            return this.parent;\n            \n        if (!this.parent.node)\n            throw new Error('Control hasn\\'t be added to Input or Node');\n\n        return this.parent.node;\n    }\n\n    getData(key: string) {\n        return this.getNode().data[key];\n    }\n\n    putData(key: string, data: unknown) {\n        this.getNode().data[key] = data;\n    }  \n}","import { Events } from './events';\n\nexport class Emitter<EventTypes> {\n\n    events: {[key: string]: Function[]} = {};\n    silent = false;\n\n    constructor(events: Events | Emitter<EventTypes>) {\n        this.events = events instanceof Emitter ? events.events : events.handlers;\n    }\n\n    on<K extends keyof EventTypes>(names: K | K[], handler: (args: EventTypes[K]) => void | unknown): Function {\n        const events = names instanceof Array ? names : (names as string).split(' ');\n\n        const unsubscribeMap: any= {};\n\n        (events as string[]).forEach(name => {\n            if (!this.events[name])\n                throw new Error(`The event ${name} does not exist`);\n            this.events[name].push(handler);\n            unsubscribeMap[name] = () =>{\n                const index: number = this.events[name].length - 1;\n\n                this.events[name].splice(index, 1);\n            }\n        });\n\n        return () => {\n            Object.values(unsubscribeMap).forEach((f: any) => f())\n        }\n    }\n\n    trigger<K extends keyof EventTypes>(name: K, params: EventTypes[K] | {} = {}) {\n        if (!(name in this.events))\n            throw new Error(`The event ${name} cannot be triggered`);\n\n        return this.events[name as string].reduce((r: boolean, e: Function) => {\n            return (e(params) !== false) && r\n        }, true); // return false if at least one event is false        \n    }\n\n    bind(name: string) {\n        if (this.events[name])\n            throw new Error(`The event ${name} is already bound`);\n\n        this.events[name] = [];\n    }\n\n    exist(name: string) {\n        return Array.isArray(this.events[name]);\n    }\n}","import { Connection } from './connection';\nimport { Node } from './node';\nimport { Socket } from './socket';\n\nexport class IO {\n\n    node: Node | null = null;\n    multipleConnections: boolean;\n    connections: Connection[] = [];\n   \n    key: string;\n    name: string;\n    socket: Socket;\n\n    constructor(key: string, name: string, socket: Socket, multiConns: boolean) {\n\t    this.node = null;\n        this.multipleConnections = multiConns;\n        this.connections = [];\n\t   \n        this.key = key;\n        this.name = name;\n        this.socket = socket;\n    }\n    \n    removeConnection(connection: Connection) {\n        this.connections.splice(this.connections.indexOf(connection), 1);\n    }\n\n    removeConnections() {\n        this.connections.forEach(connection => this.removeConnection(connection));\n    }\n}","import { Connection } from './connection';\nimport { Control } from './control';\nimport { IO } from './io';\nimport { InputData } from './core/data';\nimport { Socket } from './socket';\n\nexport class Input extends IO {\n   \n    control: Control | null = null;\n\n    constructor(key: string, title: string, socket: Socket, multiConns: boolean = false) {\n        super(key, title, socket, multiConns);\n    }\n\n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    addConnection(connection: Connection) {\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Multiple connections not allowed');\n        this.connections.push(connection);\n    }\n\n    addControl(control: Control) {\n        this.control = control;\n        control.parent = this;\n    }\n\n    showControl() {\n        return !this.hasConnection() && this.control !== null;\n    }\n\n    toJSON(): InputData {\n        return {\n            'connections': this.connections.map(c => {\n                if (!c.output.node) throw new Error('Node not added to Output');\n\n                return {\n                    node: c.output.node.id,\n                    output: c.output.key,\n                    data: c.data\n                };\n            })\n        };\n    }\n}","import { Data } from './data';\n\nexport class Validator {\n\n    static isValidData(data: Data) {\n        return typeof data.id === 'string' &&\n            this.isValidId(data.id) &&\n            data.nodes instanceof Object && !(data.nodes instanceof Array);\n    }\n\n    static isValidId(id: string) {\n        return /^[\\w-]{3,}@[0-9]+\\.[0-9]+\\.[0-9]+$/.test(id);\n    }\n\n    static validate(id: string, data: Data) {\n        const id1 = id.split('@');\n        const id2 = data.id.split('@');\n        let msg = [];\n\n        if (!this.isValidData(data))\n            msg.push('Data is not suitable'); \n        if (id !== data.id)\n            msg.push('IDs not equal');\n        if (id1[0] !== id2[0])\n            msg.push('Names don\\'t match');\n        if (id1[1] !== id2[1])\n            msg.push('Versions don\\'t match');\n\n        return { success: Boolean(!msg.length), msg: msg.join('. ') };\n    }\n}","import { Component } from '../engine/component';\nimport { Emitter } from './emitter'\nimport { Validator } from './validator'\nimport { EventsTypes as DefaultEvents, Events } from './events';\nimport { Plugin, PluginParams } from './plugin';\n\nexport class Context<EventsTypes> extends Emitter<EventsTypes & DefaultEvents> {\n\n    id: string;\n    plugins: Map<string, unknown>;\n    components: Map<string, Component>;\n\n    constructor(id: string, events: Events) {\n        super(events);\n\n        if (!Validator.isValidId(id))\n            throw new Error('ID should be valid to name@0.1.0 format');  \n        \n        this.id = id;\n        this.plugins = new Map();\n        this.components = new Map();\n    }\n\n    use<T extends Plugin, O extends PluginParams<T>>(plugin: T, options?: O) {\n        if (plugin.name && this.plugins.has(plugin.name)) throw new Error(`Plugin ${plugin.name} already in use`)\n\n        plugin.install(this, options || {});\n        this.plugins.set(plugin.name, options)\n    }\n\n    register(component: Component) {\n        if (this.components.has(component.name))\n            throw new Error(`Component ${component.name} already registered`);\n\n        this.components.set(component.name, component);\n        this.trigger('componentregister', component);\n    }\n\n    destroy() {\n        this.trigger('destroy');\n    }\n}","export function listenWindow<K extends keyof WindowEventMap>(event: K, handler: (e: WindowEventMap[K]) => void) {\n    window.addEventListener(event, handler);\n    \n    return () => {\n        window.removeEventListener<K>(event, handler);\n    }\n}","import { Component } from '../engine/component';\n\nexport class Events {\n\n    handlers: {};\n\n    constructor(handlers: {}) {\n        this.handlers = {\n            warn: [console.warn],\n            error: [console.error],\n            componentregister: [],\n            destroy: [],\n            ...handlers\n        }\n    }\n}\n\nexport interface EventsTypes {\n    warn: string | Error;\n    error: string | Error;\n    componentregister: Component;\n    destroy: void;\n}","import { listenWindow } from './utils';\n\nexport class Drag {\n\n    pointerStart: [number, number] | null;\n    el: HTMLElement;\n    destroy: () => void;\n\n    constructor(\n        el: HTMLElement,\n        private onTranslate = (_x: number, _y: number, _e: PointerEvent) => {},\n        private onStart = (_e: PointerEvent) => {},\n        private onDrag = (_e: PointerEvent) => {}\n    ) {\n        this.pointerStart = null;\n        this.el = el;\n\n        this.el.style.touchAction = 'none';\n        this.el.addEventListener('pointerdown', this.down.bind(this));\n\n        const destroyMove = listenWindow('pointermove', this.move.bind(this));\n        const destroyUp = listenWindow('pointerup', this.up.bind(this));\n\n        this.destroy = () => { destroyMove(); destroyUp(); }\n    }\n\n    down(e: PointerEvent) {\n        if ((e.pointerType === 'mouse') && (e.button !== 0)) return;\n        e.stopPropagation();\n        this.pointerStart = [e.pageX, e.pageY]\n\n        this.onStart(e);\n    }\n\n    move(e: PointerEvent) {\n        if (!this.pointerStart) return;\n        e.preventDefault();\n\n        let [x, y] = [e.pageX, e.pageY]\n\n        let delta = [x - this.pointerStart[0], y - this.pointerStart[1]];\n\n        let zoom = this.el.getBoundingClientRect().width / this.el.offsetWidth;\n\n        this.onTranslate(delta[0] / zoom, delta[1] / zoom, e);\n    }\n\n    up(e: PointerEvent) {\n        if (!this.pointerStart) return;\n        \n        this.pointerStart = null;\n        this.onDrag(e);\n    }\n}","import { listenWindow } from './utils';\n\nexport class Zoom {\n\n    el: HTMLElement;\n    intensity: number;\n    onzoom: Function;\n    previous: { cx: number; cy: number; distance: number } | null = null;\n\n    pointers: PointerEvent[] = [];\n    destroy: () => void;\n\n    constructor(container: HTMLElement, el: HTMLElement, intensity: number, onzoom: Function) {\n        this.el = el;\n        this.intensity = intensity;\n        this.onzoom = onzoom;\n\n        container.addEventListener('wheel', this.wheel.bind(this));\n        container.addEventListener('pointerdown', this.down.bind(this));\n        container.addEventListener('dblclick', this.dblclick.bind(this));\n\n        const destroyMove = listenWindow('pointermove', this.move.bind(this));\n        const destroyUp = listenWindow('pointerup', this.end.bind(this));\n        const destroyCancel = listenWindow('pointercancel', this.end.bind(this));\n\n        this.destroy = () => { destroyMove(); destroyUp(); destroyCancel(); }\n    }\n\n    get translating() { // is translating while zoom (works on multitouch)\n        return this.pointers.length >= 2;\n    }\n\n    wheel(e: WheelEvent) {\n        e.preventDefault();\n\n        const rect = this.el.getBoundingClientRect();\n        const isNegative = e.deltaY < 0;\n        const delta = isNegative ? this.intensity : - this.intensity;\n        const ox = (rect.left - e.clientX) * delta;\n        const oy = (rect.top - e.clientY) * delta;\n\n        this.onzoom(delta, ox, oy, 'wheel');\n    }\n\n    touches() {\n        let e = { touches: this.pointers }\n        let [x1, y1] = [e.touches[0].clientX, e.touches[0].clientY];\n        let [x2, y2] = [e.touches[1].clientX, e.touches[1].clientY];\n\n        let distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n\n        return {\n            cx: (x1 + x2)/2,\n            cy: (y1 + y2)/2,\n            distance\n        };\n    }\n\n    down(e: PointerEvent) {\n        this.pointers.push(e);\n    }\n\n    move(e: PointerEvent) {\n        this.pointers = this.pointers.map(p => p.pointerId === e.pointerId ? e : p)\n        if (!this.translating) return;\n\n        let rect = this.el.getBoundingClientRect();\n\n        let { cx, cy, distance } = this.touches();\n\n        if (this.previous !== null) {\n            let delta = distance / this.previous.distance - 1;\n\n            const ox = (rect.left - cx) * delta;\n            const oy = (rect.top - cy) * delta;\n\n            this.onzoom(delta, ox - (this.previous.cx - cx), oy - (this.previous.cy - cy), 'touch');\n        }\n        this.previous = { cx, cy, distance };\n    }\n\n    end(e: PointerEvent) {\n        this.previous = null;\n        this.pointers = this.pointers.filter(p => p.pointerId !== e.pointerId)\n    }\n\n    dblclick(e: MouseEvent) {\n        e.preventDefault();\n\n        const rect = this.el.getBoundingClientRect();\n        const delta = 4 * this.intensity;\n\n        const ox = (rect.left - e.clientX) * delta;\n        const oy = (rect.top - e.clientY) * delta;\n\n        this.onzoom(delta, ox, oy, 'dblclick');\n    }\n}\n","import { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { Zoom } from './zoom';\n\nexport interface Transform { k: number; x: number; y: number }\nexport interface Mouse { x: number; y: number }\nexport type ZoomSource = 'wheel' | 'touch' | 'dblclick';\n\nexport class Area extends Emitter<EventsTypes> {\n\n    el: HTMLElement;\n    container: HTMLElement;\n    transform: Transform = { k: 1, x: 0, y: 0 };\n    mouse: Mouse = { x: 0, y: 0 }\n    \n    private _startPosition: Transform | null = null\n    private _zoom: Zoom;\n    private _drag: Drag;\n\n    constructor(container: HTMLElement, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        \n        const el = this.el = document.createElement('div');\n\n        this.container = container;\n        el.style.transformOrigin = '0 0';\n\n        this._zoom = new Zoom(container, el, 0.1, this.onZoom.bind(this));\n        this._drag = new Drag(container, this.onTranslate.bind(this), this.onStart.bind(this));\n\n        emitter.on('destroy', () => {\n            this._zoom.destroy();\n            this._drag.destroy();\n        });\n\n        this.container.addEventListener('pointermove', this.pointermove.bind(this));\n\n        this.update();\n    }\n\n    update() {\n        const t = this.transform;\n\n        this.el.style.transform = `translate(${t.x}px, ${t.y}px) scale(${t.k})`;\n    }\n\n    pointermove(e: PointerEvent) {\n        const { clientX, clientY } = e;\n        const rect = this.el.getBoundingClientRect();\n        const x = clientX - rect.left;\n        const y = clientY - rect.top;\n        const k = this.transform.k;\n        \n        this.mouse = { x: x / k, y: y / k };\n        this.trigger('mousemove', { ...this.mouse }); // TODO rename on `pointermove`\n    }\n\n    onStart() {\n        this._startPosition = { ...this.transform };\n    }\n\n    onTranslate(dx: number, dy: number) {\n        if (this._zoom.translating) return; // lock translation while zoom on multitouch\n        if (this._startPosition) this.translate(this._startPosition.x + dx, this._startPosition.y + dy);\n    }\n\n    onZoom(delta: number, ox: number, oy: number, source: ZoomSource) {\n        this.zoom(this.transform.k * (1 + delta), ox, oy, source);\n\n        this.update();\n    }\n\n    translate(x: number, y: number) {\n        const params = { transform: this.transform, x, y };\n\n        if (!this.trigger('translate', params)) return;\n\n        this.transform.x = params.x;\n        this.transform.y = params.y;\n\n        this.update();\n        this.trigger('translated');\n    }\n\n    zoom(zoom: number, ox = 0, oy = 0, source: ZoomSource) {\n        const k = this.transform.k;\n        const params = { transform: this.transform, zoom, source };\n\n        if (!this.trigger('zoom', params)) return;\n        \n        const d = (k - params.zoom) / ((k - zoom) || 1);\n\n        this.transform.k = params.zoom || 1;\n        this.transform.x += ox * d;\n        this.transform.y += oy * d;\n\n        this.update();\n        this.trigger('zoomed', { source });\n    }\n\n    appendChild(el: HTMLElement) {\n        this.el.appendChild(el)\n    }\n\n    removeChild(el: HTMLElement) {\n        this.el.removeChild(el)\n    }\n}","import { Connection } from '../connection';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { NodeView } from './node';\n\nexport class ConnectionView extends Emitter<EventsTypes> {\n\n    connection: Connection;\n    inputNode: NodeView;\n    outputNode: NodeView;\n    el: HTMLElement;\n\n    constructor(connection: Connection, inputNode: NodeView, outputNode: NodeView, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.connection = connection;\n        this.inputNode = inputNode;\n        this.outputNode = outputNode;\n\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n        this.el.style.zIndex = '-1';\n\n        this.trigger('renderconnection', { \n            el: this.el, \n            connection: this.connection, \n            points: this.getPoints()\n        });\n    }\n\n    getPoints() {\n        const [x1, y1] = this.outputNode.getSocketPosition(this.connection.output);\n        const [x2, y2] = this.inputNode.getSocketPosition(this.connection.input);\n\n        return [x1, y1, x2, y2];\n    }\n\n    update() {\n        this.trigger('updateconnection', { \n            el: this.el, \n            connection: this.connection, \n            points: this.getPoints()\n        });\n    }\n}","import { Control } from '../control';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\n\nexport class ControlView extends Emitter<EventsTypes> {\n\n    constructor(el: HTMLElement, control: Control, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.trigger('rendercontrol', { el, control });\n    }\n}","import { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { IO } from '../io';\nimport { Node } from '../node';\n\nexport class SocketView extends Emitter<EventsTypes> {\n\n    el: HTMLElement;\n    type: string;\n    io: IO;\n    node: Node;\n\n    constructor(el: HTMLElement, type: string, io: IO, node: Node, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.el = el;\n        this.type = type;\n        this.io = io;\n        this.node = node;\n\n        this.trigger('rendersocket', { el, [type]: this.io, socket: io.socket });\n    }\n\n    getPosition({ position }: { position: number[] }): [number, number] {\n        const el = this.el;\n\n        return [\n            position[0] + el.offsetLeft + el.offsetWidth / 2,\n            position[1] + el.offsetTop + el.offsetHeight / 2\n        ]\n    }\n}","import { Component } from '../engine/component';\nimport { Control } from '../control';\nimport { ControlView } from './control';\nimport { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { IO } from '../io';\nimport { Node } from '../node';\nimport { SocketView } from './socket';\n\nexport class NodeView extends Emitter<EventsTypes> {\n\n    node: Node;\n    component: Component;\n    sockets = new Map<IO, SocketView>();\n    controls = new Map<Control, ControlView>();\n\n    el: HTMLElement;\n    private _startPosition: number[] = [];\n    private _drag: Drag;\n\n    constructor(node: Node, component: Component, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n\n        this.node = node;\n        this.component = component;\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n\n        this.el.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, node: this.node }));\n\n        this._drag = new Drag(this.el, this.onTranslate.bind(this), this.onSelect.bind(this), () => {\n            this.trigger('nodedraged', node);\n            this.trigger('nodedragged', node);\n        });\n\n        this.trigger('rendernode', {\n            el: this.el, \n            node, \n            component: component.data, \n            bindSocket: this.bindSocket.bind(this),\n            bindControl: this.bindControl.bind(this)\n        });\n\n        this.update();\n    }\n\n    clearSockets() {\n        const ios: IO[] = [ ...this.node.inputs.values(), ...this.node.outputs.values()];\n        \n        this.sockets.forEach(s => {\n            if (!ios.includes(s.io)) this.sockets.delete(s.io);\n        });\n    }\n\n    bindSocket(el: HTMLElement, type: string, io: IO) {\n        this.clearSockets();\n        this.sockets.set(io, new SocketView(el, type, io, this.node, this));\n    }\n\n    bindControl(el: HTMLElement, control: Control) {\n        this.controls.set(control, new ControlView(el, control, this));\n    }\n\n    getSocketPosition(io: IO) {\n        const socket = this.sockets.get(io);\n\n        if (!socket) throw new Error(`Socket not found for ${io.name} with key ${io.key}`);\n\n        return socket.getPosition(this.node);\n    }\n\n    onSelect(e: MouseEvent) {\n        const payload = { node: this.node, accumulate: e.ctrlKey, e };\n    \n        this.onStart();\n        this.trigger('multiselectnode', payload);\n        this.trigger('selectnode', payload);\n    }\n\n    onStart() {\n        this._startPosition = [...this.node.position];\n    }\n\n    onTranslate(dx: number, dy: number) {\n        this.trigger('translatenode', { node: this.node, dx, dy });\n    }\n\n    onDrag(dx: number, dy: number) {\n        const x = this._startPosition[0] + dx;\n        const y = this._startPosition[1] + dy;\n\n        this.translate(x, y);\n    }\n\n    translate(x: number, y: number) {\n        const node = this.node;\n        const params = { node, x, y };\n\n        if (!this.trigger('nodetranslate', params)) return;\n\n        const [px, py] = node.position;\n        const prev: [number, number] = [px, py];\n\n        node.position[0] = params.x;\n        node.position[1] = params.y;\n\n        this.update();\n        this.trigger('nodetranslated', { node, prev });\n    }\n\n    update() {\n        const [x, y] = this.node.position;\n\n        this.el.style.transform = `translate(${x}px, ${y}px)`;\n    }\n\n    remove() {\n        \n    }\n\n    destroy() {\n        this._drag.destroy();\n    }\n}\n","import { Area } from './area';\nimport { Component } from '../engine/component';\nimport { Connection } from '../connection';\nimport { ConnectionView } from './connection';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { Node } from '../node';\nimport { NodeView } from './node';\nimport { listenWindow } from './utils';\n\nexport class EditorView extends Emitter<EventsTypes> {\n\n    container: HTMLElement;\n    components: Map<string, Component>;\n    nodes = new Map<Node, NodeView>();\n    connections = new Map<Connection, ConnectionView>();\n    area: Area;\n\n    constructor(container: HTMLElement, components: Map<string, Component>, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n\n        this.container = container;\n        this.components = components;\n\n        this.container.style.overflow = 'hidden';\n\n        this.container.addEventListener('click', this.click.bind(this));\n        this.container.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, view: this }));\n        emitter.on('destroy', listenWindow('resize', this.resize.bind(this)));\n        emitter.on('destroy', () => this.nodes.forEach(view => view.destroy()));\n  \n        this.on('nodetranslated', this.updateConnections.bind(this));\n            \n        this.area = new Area(container, this);\n        this.container.appendChild(this.area.el);\n    }\n\n    addNode(node: Node) {\n        const component = this.components.get(node.name);\n\n        if (!component) throw new Error(`Component ${node.name} not found`);\n        \n        const nodeView = new NodeView(node, component, this);\n\n        this.nodes.set(node, nodeView);\n        this.area.appendChild(nodeView.el);\n    }\n\n    removeNode(node: Node) {\n        const nodeView = this.nodes.get(node);\n\n        this.nodes.delete(node);\n        if (nodeView) {\n            this.area.removeChild(nodeView.el);\n            nodeView.destroy();\n        }\n    }\n\n    addConnection(connection: Connection) {\n        if (!connection.input.node || !connection.output.node)\n            throw new Error('Connection input or output not added to node');\n\n        const viewInput = this.nodes.get(connection.input.node);\n        const viewOutput = this.nodes.get(connection.output.node);\n\n        if (!viewInput || !viewOutput)\n            throw new Error('View node not found for input or output');\n\n        const connView = new ConnectionView(connection, viewInput, viewOutput, this);\n\n        this.connections.set(connection, connView);\n        this.area.appendChild(connView.el);\n    }\n\n    removeConnection(connection: Connection) {\n        const connView = this.connections.get(connection);\n\n        this.connections.delete(connection);\n        if (connView)\n            this.area.removeChild(connView.el);\n    }\n\n    updateConnections({ node }: { node: Node }) {\n        node.getConnections().forEach(conn => {\n            let connView = this.connections.get(conn);\n\n            if (!connView) throw new Error('Connection view not found');\n\n            connView.update();\n        });\n    }\n\n    resize() {\n        const { container } = this;\n\n        if (!container.parentElement)\n            throw new Error('Container doesn\\'t have parent element');\n\n        const width = container.parentElement.clientWidth;\n        const height = container.parentElement.clientHeight;\n\n        container.style.width = width + 'px';\n        container.style.height = height + 'px';\n    }\n\n    click(e: Event) {\n        const container = this.container;\n        \n        if (container !== e.target) return;\n        if (!this.trigger('click', { e, container })) return;\n    }\n}\n","import { Node } from './node';\n\nexport class Selected {\n\n    list: Node[] = [];\n\n    add(item: Node, accumulate = false) {\n        if (!accumulate)\n            this.list = [item]; \n        else if (!this.contains(item))\n            this.list.push(item);   \n    }\n\n    clear() {\n        this.list = [];\n    }\n\n    remove(item: Node) {\n        this.list.splice(this.list.indexOf(item), 1);\n    }\n\n    contains(item: Node) {\n        return this.list.indexOf(item) !== -1;\n    }\n\n    each(callback: (n: Node, index: number) => void) {\n        this.list.forEach(callback);\n    }\n}","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Control } from './control';\nimport { Data } from './core/data';\nimport { EditorView } from './view';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { Output } from './output';\nimport { Socket } from './socket';\nimport { EventsTypes as DefaultEventsTypes, Events } from './core/events';\nimport { Mouse, Transform, ZoomSource } from './view/area';\n\nexport class EditorEvents extends Events {\n\n    constructor() {\n        super({\n            nodecreate: [],\n            nodecreated: [],\n            noderemove: [],\n            noderemoved: [],\n            connectioncreate: [],\n            connectioncreated: [],\n            connectionremove: [],\n            connectionremoved: [],\n            translatenode: [],\n            nodetranslate: [],\n            nodetranslated: [],\n            nodedraged: [],\n            nodedragged: [],\n            selectnode: [],\n            multiselectnode: [],\n            nodeselect: [],\n            nodeselected: [],\n            rendernode: [],\n            rendersocket: [],\n            rendercontrol: [],\n            renderconnection: [],\n            updateconnection: [],\n            keydown: [],\n            keyup: [],\n            translate: [],\n            translated: [],\n            zoom: [],\n            zoomed: [],\n            click: [],\n            mousemove: [],\n            contextmenu: [],\n            import: [],\n            export: [],\n            process: [],\n            clear: []\n        });\n    }    \n}\n\nexport interface EventsTypes extends DefaultEventsTypes {\n    componentregister: Component;\n    nodecreate: Node;\n    nodecreated: Node;\n    noderemove: Node;\n    noderemoved: Node;\n    connectioncreate: { input: Input; output: Output };\n    connectioncreated: Connection;\n    connectionremove: Connection;\n    connectionremoved: Connection;\n    translatenode: { node: Node; dx: number; dy: number };\n    nodetranslate: { node: Node; x: number; y: number };\n    nodetranslated: { node: Node; prev: [number, number] };\n    nodedraged: Node;\n    nodedragged: Node;\n    selectnode: {\n        node: Node;\n        accumulate: boolean;\n    };\n    multiselectnode: {\n        node: Node;\n        accumulate: boolean;\n        e: MouseEvent;\n    };\n    nodeselect: Node;\n    nodeselected: Node;\n    rendernode: {\n        el: HTMLElement;\n        node: Node;\n        component: object;\n        bindSocket: Function;\n        bindControl: Function;\n    };\n    rendersocket: {\n        el: HTMLElement;\n        input?: Input;\n        output?: Output;\n        socket: Socket;\n    };\n    rendercontrol: {\n        el: HTMLElement;\n        control: Control;\n    };\n    renderconnection: {\n        el: HTMLElement;\n        connection: Connection;\n        points: number[];\n    };\n    updateconnection: {\n        el: HTMLElement;\n        connection: Connection;\n        points: number[];\n    };\n    keydown: KeyboardEvent;\n    keyup: KeyboardEvent;\n    translate: {\n        transform: Transform;\n        x: number;\n        y: number;\n    };\n    translated: void;\n    zoom: {\n        transform: Transform;\n        zoom: number;\n        source: ZoomSource;\n    };\n    zoomed: {\n        source: ZoomSource;\n    };\n    click: {\n        e: Event;\n        container: HTMLElement;\n    };\n    mousemove: Mouse;\n    contextmenu: {\n        e: MouseEvent;\n        view?: EditorView;\n        node?: Node;\n    };\n    import: Data;\n    export: Data;\n    process: void;\n    clear: void;\n}\n","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Context } from './core/context';\nimport { Data } from './core/data';\nimport { EditorView } from './view/index';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { Output } from './output';\nimport { Selected } from './selected';\nimport { Validator } from './core/validator';\nimport { listenWindow } from './view/utils';\nimport { EditorEvents, EventsTypes } from './events';\n\nexport class NodeEditor extends Context<EventsTypes> {\n\n    nodes: Node[] = [];\n    selected = new Selected();\n    view: EditorView;\n\n    constructor(id: string, container: HTMLElement) {\n        super(id, new EditorEvents());\n        \n        this.view = new EditorView(container, this.components, this);\n\n        this.on('destroy', listenWindow('keydown', e => this.trigger('keydown', e)));\n        this.on('destroy', listenWindow('keyup', e => this.trigger('keyup', e)));\n\n        this.on('selectnode', ({ node, accumulate }) => this.selectNode(node, accumulate));\n        this.on('nodeselected', () => this.selected.each(n => {\n            const nodeView = this.view.nodes.get(n);\n\n            nodeView && nodeView.onStart()\n        }));\n        this.on('translatenode', ({ dx, dy }) => this.selected.each(n => {\n            const nodeView = this.view.nodes.get(n);\n\n            nodeView && nodeView.onDrag(dx, dy)\n        }));\n    }\n\n    addNode(node: Node) {\n        if (!this.trigger('nodecreate', node)) return;\n\n        this.nodes.push(node);\n        this.view.addNode(node);\n        \n        this.trigger('nodecreated', node);\n    }\n\n    removeNode(node: Node) {\n        if (!this.trigger('noderemove', node)) return;\n\n        node.getConnections().forEach(c => this.removeConnection(c));\n\n        this.nodes.splice(this.nodes.indexOf(node), 1);\n        this.view.removeNode(node);\n\n        this.trigger('noderemoved', node);\n    }\n\n    connect(output: Output, input: Input, data: unknown = {}) {\n        if (!this.trigger('connectioncreate', { output, input })) return;\n\n        try {\n            const connection = output.connectTo(input);\n\n            connection.data = data;\n            this.view.addConnection(connection);\n\n            this.trigger('connectioncreated', connection);\n        } catch (e) {\n            this.trigger('warn', e)\n        }\n    }\n\n    removeConnection(connection: Connection) {\n        if (!this.trigger('connectionremove', connection)) return;\n            \n        this.view.removeConnection(connection);\n        connection.remove();\n\n        this.trigger('connectionremoved', connection);\n    }\n\n    selectNode(node: Node, accumulate: boolean = false) {\n        if (this.nodes.indexOf(node) === -1) \n            throw new Error('Node not exist in list');\n        \n        if (!this.trigger('nodeselect', node)) return;\n\n        this.selected.add(node, accumulate);\n        \n        this.trigger('nodeselected', node);\n    }\n\n    getComponent(name: string) {\n        const component = this.components.get(name);\n\n        if (!component)\n            throw `Component ${name} not found`;\n        \n        return component as Component;\n    }\n\n    register(component: Component) {\n        super.register(component)\n        component.editor = this;\n    }\n\n    clear() {\n        [...this.nodes].forEach(node => this.removeNode(node));\n        this.trigger('clear');\n    }\n\n    toJSON() {\n        const data: Data = { id: this.id, nodes: {} };\n        \n        this.nodes.forEach(node => data.nodes[node.id] = node.toJSON());\n        this.trigger('export', data);\n        return data;\n    }\n\n    beforeImport(json: Data) {\n        const checking = Validator.validate(this.id, json);\n        \n        if (!checking.success) {\n            this.trigger('warn', checking.msg);\n            return false;\n        }\n        \n        this.silent = true;\n        this.clear();\n        this.trigger('import', json);\n        return true;\n    }\n\n    afterImport() {\n        this.silent = false;\n        return true;\n    }\n\n    async fromJSON(json: Data) {\n        if (!this.beforeImport(json)) return false;\n        const nodes: {[key: string]: Node} = {};\n\n        try {\n            await Promise.all(Object.keys(json.nodes).map(async id => {\n                const node = json.nodes[id];\n                const component = this.getComponent(node.name);\n\n                nodes[id] = await component.build(Node.fromJSON(node));\n                this.addNode(nodes[id]);\n            }));\n        \n            Object.keys(json.nodes).forEach(id => {\n                const jsonNode = json.nodes[id];\n                const node = nodes[id];\n                \n                Object.keys(jsonNode.outputs).forEach(key => {\n                    const outputJson = jsonNode.outputs[key];\n\n                    outputJson.connections.forEach(jsonConnection => {\n                        const nodeId = jsonConnection.node;\n                        const data = jsonConnection.data;\n                        const targetOutput = node.outputs.get(key);\n                        const targetInput = nodes[nodeId].inputs.get(jsonConnection.input);\n\n                        if (!targetOutput || !targetInput) {\n                            return this.trigger('error', `IO not found for node ${node.id}`);\n                        }\n\n                        this.connect(targetOutput, targetInput, data);\n                    });\n                });\n\n            });\n        } catch (e) {\n            this.trigger('warn', e);\n            return !this.afterImport();\n        }\n\n        return this.afterImport();\n    }\n}\n","import { Connection } from './connection';\nimport { IO } from './io';\nimport { Input } from './input';\nimport { OutputData } from './core/data';\nimport { Socket } from './socket';\n\nexport class Output extends IO {\n  \n    constructor(key: string, title: string, socket: Socket, multiConns: boolean = true) {\n        super(key, title, socket, multiConns);\n    }\n    \n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    connectTo(input: Input) {\n        if (!this.socket.compatibleWith(input.socket))\n            throw new Error('Sockets not compatible');\n        if (!input.multipleConnections && input.hasConnection())\n            throw new Error('Input already has one connection');\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Output already has one connection');\n\n        const connection = new Connection(this, input);\n\n        this.connections.push(connection);\n        return connection;\n    }\n\n    connectedTo(input: Input) {\n        return this.connections.some((item) => {\n            return item.input === input;\n        });\n    }\n\n    toJSON(): OutputData {\n        return {\n            'connections': this.connections.map(c => {\n                if (!c.input.node) throw new Error('Node not added to Input');\n\n                return {\n                    node: c.input.node.id,\n                    input: c.input.key,\n                    data: c.data\n                }\n            })\n        };\n    }\n}","export class Socket {\n\n    name: string;\n    data: unknown;\n    compatible: Socket[] = [];\n\n    constructor(name: string, data = {}) {\n        this.name = name;\n        this.data = data;\n        this.compatible = [];\n    }\n\n    combineWith(socket: Socket) {\n        this.compatible.push(socket);\n    }\n\n    compatibleWith(socket: Socket) {\n        return this === socket || this.compatible.includes(socket);\n    }\n}","import { InputConnectionData, NodeData, NodesData } from '../core/data';\n\nfunction intersect<T>(array1: T[], array2: T[]) {\n    return array1.filter(value => -1 !== array2.indexOf(value));\n}\n\nexport class Recursion {\n\n    nodes: NodesData;\n\n    constructor(nodes: NodesData) {\n        this.nodes = nodes;\n    }\n    \n    extractInputNodes(node: NodeData): NodeData[] {\n        return Object.keys(node.inputs).reduce((acc: NodeData[], key: string) => {\n            const { connections } = node.inputs[key];\n            const nodesData = (connections || []).reduce((b: NodeData[], c: InputConnectionData) => {\n                return [...b, this.nodes[c.node]];\n            }, []);\n\n            return [...acc, ...nodesData]\n        }, []);\n    }\n\n    findSelf(list: NodeData[], inputNodes: NodeData[]): NodeData | null {\n        const inters = intersect<NodeData>(list, inputNodes);\n\n        if (inters.length)\n            return inters[0];\n        \n        for (let node of inputNodes) {\n            let l = [node, ...list];\n            let inter = this.findSelf(l, this.extractInputNodes(node));\n\n            if (inter)\n                return inter;\n        }\n\n        return null;\n    }\n\n    detect(): NodeData | null {\n        const nodesArr = Object.keys(this.nodes).map(id => this.nodes[id]);\n\n        for (let node of nodesArr) {\n            let inters = this.findSelf([node], this.extractInputNodes(node));\n\n            if (inters)\n                return inters;\n        }\n\n        return null;\n    }\n}","export const State = { AVAILABLE: 0, PROCESSED: 1, ABORT: 2 }","import { Events } from '../core/events';\n\nexport class EngineEvents extends Events {\n\n    constructor() {\n        super({});\n    }    \n}\nexport interface EventsTypes {\n}","import { Component } from './component';\nimport { Context } from '../core/context';\nimport { Recursion } from './recursion';\nimport { State } from './state';\nimport { Validator } from '../core/validator';\nimport { Data, NodeData, WorkerOutputs } from '../core/data';\nimport { EngineEvents, EventsTypes } from './events';\nexport { Component, Recursion };\n\ninterface EngineNode extends NodeData {\n    busy: boolean;\n    unlockPool: (() => void)[];\n    outputData: WorkerOutputs;\n}\n\nexport class Engine extends Context<EventsTypes> {\n\n    args: unknown[] = [];\n    data: Data | null = null;\n    state = State.AVAILABLE;\n    onAbort = () => { };\n\n    constructor(id: string) {\n        super(id, new EngineEvents());\n    }\n\n    public clone() {\n        const engine = new Engine(this.id);\n\n        this.components.forEach(c => engine.register(c));\n\n        return engine;\n    }\n\n    async throwError (message: string, data: unknown = null) {\n        await this.abort();\n        this.trigger('error', { message, data });\n        this.processDone();\n\n        return 'error';\n    }\n\n    private processStart() {\n        if (this.state === State.AVAILABLE) {  \n            this.state = State.PROCESSED;\n            return true;\n        }\n\n        if (this.state === State.ABORT) {\n            return false;\n        }\n\n        console.warn(`The process is busy and has not been restarted.\n                Use abort() to force it to complete`);\n        return false;\n    }\n\n    private processDone() {\n        const success = this.state !== State.ABORT;\n\n        this.state = State.AVAILABLE;\n        \n        if (!success) {\n            this.onAbort();\n            this.onAbort = () => { }\n        }    \n\n        return success;\n    }\n\n    public async abort() {\n        return new Promise(ret => {\n            if (this.state === State.PROCESSED) {\n                this.state = State.ABORT;\n                this.onAbort = ret;\n            }\n            else if (this.state === State.ABORT) {\n                this.onAbort();\n                this.onAbort = ret;\n            }\n            else\n                ret();\n        });\n    }\n\n    private async lock(node: EngineNode) {\n        return new Promise(res => {\n            node.unlockPool = node.unlockPool || [];\n            if (node.busy && !node.outputData)\n                node.unlockPool.push(res);\n            else \n                res();\n            \n            node.busy = true;\n        });    \n    }\n\n    unlock(node: EngineNode) {\n        node.unlockPool.forEach(a => a());\n        node.unlockPool = [];\n        node.busy = false;\n    }\n\n    private async extractInputData(node: NodeData) {\n        const obj: {[id: string]: any} = {};\n\n        for (let key of Object.keys(node.inputs)) {\n            const input = node.inputs[key];\n            const conns = input.connections;\n            const connData = await Promise.all(conns.map(async (c) => {\n                const prevNode = (this.data as Data).nodes[c.node];\n\n                const outputs = await this.processNode(prevNode as EngineNode);\n\n                if (!outputs) \n                    this.abort();\n                else\n                    return outputs[c.output];\n            }));\n\n            obj[key] = connData;\n        }\n\n        return obj;\n    }\n\n    private async processWorker(node: NodeData) {\n        const inputData = await this.extractInputData(node);\n        const component = this.components.get(node.name) as Component;\n        const outputData = {};\n\n        try {\n            await component.worker(node, inputData, outputData, ...this.args);\n        } catch (e) {\n            this.abort();\n            this.trigger('warn', e);\n        }\n\n        return outputData;\n    }\n\n    private async processNode(node: EngineNode) {\n        if (this.state === State.ABORT || !node)\n            return null;\n        \n        await this.lock(node);\n\n        if (!node.outputData) {\n            node.outputData = await this.processWorker(node);\n        }\n\n        this.unlock(node);\n        return node.outputData;\n    }\n\n    private async forwardProcess(node: NodeData) {\n        if (this.state === State.ABORT)\n            return null;\n\n        return await Promise.all(Object.keys(node.outputs).map(async (key) => {\n            const output = node.outputs[key];\n            \n            return await Promise.all(output.connections.map(async (c) => {\n                const nextNode = (this.data as Data).nodes[c.node];\n\n                await this.processNode(nextNode as EngineNode);\n                await this.forwardProcess(nextNode);\n            }));\n        }));\n    }\n\n    copy(data: Data) {\n        data = Object.assign({}, data);\n        data.nodes = Object.assign({}, data.nodes);\n        \n        Object.keys(data.nodes).forEach(key => {\n            data.nodes[key] = Object.assign({}, data.nodes[key])\n        });\n        return data;\n    }\n\n    async validate(data: Data) {\n        const checking = Validator.validate(this.id, data);\n        const recursion = new Recursion(data.nodes);\n\n        if (!checking.success)\n            return await this.throwError(checking.msg);  \n        \n        const recurrentNode = recursion.detect();\n\n        if (recurrentNode)\n            return await this.throwError('Recursion detected', recurrentNode);      \n         \n        return true;\n    }\n\n    private async processStartNode(id: string | number | null) {\n        if (!id) return;\n\n        let startNode = (this.data as Data).nodes[id];\n\n        if (!startNode)\n            return await this.throwError('Node with such id not found');   \n        \n        await this.processNode(startNode as EngineNode);\n        await this.forwardProcess(startNode);\n    }\n\n    private async processUnreachable() {\n        const data = this.data as Data;\n\n        for (let i in data.nodes) { // process nodes that have not been reached\n            const node = data.nodes[i] as EngineNode;\n\n            if (typeof node.outputData === 'undefined') {\n                await this.processNode(node);\n                await this.forwardProcess(node);\n            }\n        }\n    }\n\n    async process<T extends unknown[]>(data: Data, startId: number | string | null = null, ...args: T) {\n        if (!this.processStart()) return;\n        if (!this.validate(data)) return;    \n        \n        this.data = this.copy(data);\n        this.args = args;\n        \n        await this.processStartNode(startId);\n        await this.processUnreachable();\n        \n        return this.processDone()?'success':'aborted';\n    }\n}","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Control } from './control';\nimport { Emitter } from './core/emitter';\nimport { IO } from './io';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { NodeEditor } from './editor';\nimport { Output } from './output';\nimport { Socket } from './socket';\nimport { Engine, Recursion } from './engine/index';\n\nexport { Engine, Recursion } from './engine/index';\nexport { Component } from './component';\nexport { Control } from './control';\nexport { Connection } from './connection';\nexport { Emitter } from './core/emitter';\nexport { Input } from './input';\nexport { IO } from './io';\nexport { Node } from './node';\nexport { NodeEditor } from './editor';\nexport { Output } from './output';\nexport { Socket } from './socket';\n\nconsole.log('USING LOCAL RETE')\n\nexport default {\n    Engine,\n    Recursion,\n    Component,\n    Control,\n    Connection,\n    Emitter,\n    Input,\n    IO,\n    Node,\n    NodeEditor,\n    Output,\n    Socket\n}"],"names":["Component","name","Node","Map","id","incrementId","list","item","prop","has","key","Error","this","set","control","_add","controls","parent","input","inputs","removeConnections","node","output","outputs","values","reduce","arr","io","connections","reduceIO","Array","from","obj","toJSON","data","position","latestId","json","x","y","Math","max","ComponentWorker","builder","build","Connection","addConnection","removeConnection","Control","constructor","TypeError","getNode","Emitter","events","handlers","names","handler","split","unsubscribeMap","forEach","_this","push","index","length","splice","Object","f","params","r","e","isArray","IO","socket","multiConns","multipleConnections","connection","indexOf","Input","title","hasConnection","map","c","Validator","isValidId","nodes","test","id1","id2","msg","isValidData","success","Boolean","join","Context","plugins","components","plugin","options","install","component","trigger","listenWindow","event","window","addEventListener","removeEventListener","Events","warn","console","error","componentregister","destroy","Drag","el","onTranslate","_x","_y","_e","onStart","onDrag","pointerStart","style","touchAction","down","bind","destroyMove","move","destroyUp","up","pointerType","button","stopPropagation","pageX","pageY","delta","zoom","preventDefault","getBoundingClientRect","width","offsetWidth","Zoom","container","intensity","onzoom","wheel","dblclick","end","destroyCancel","pointers","rect","deltaY","ox","left","clientX","oy","top","clientY","touches","x1","y1","x2","y2","cx","cy","distance","sqrt","pow","p","pointerId","translating","previous","filter","Area","emitter","k","document","createElement","transformOrigin","_zoom","onZoom","_drag","on","pointermove","update","t","transform","mouse","_startPosition","dx","dy","translate","source","d","appendChild","removeChild","ConnectionView","inputNode","outputNode","zIndex","points","getPoints","getSocketPosition","ControlView","SocketView","type","offsetLeft","offsetTop","offsetHeight","NodeView","onSelect","bindSocket","bindControl","ios","sockets","s","includes","_this2","clearSockets","get","getPosition","payload","accumulate","ctrlKey","prev","EditorView","overflow","click","view","resize","updateConnections","area","nodeView","viewInput","viewOutput","connView","getConnections","conn","parentElement","clientWidth","height","clientHeight","target","Selected","contains","callback","EditorEvents","nodecreate","nodecreated","noderemove","noderemoved","connectioncreate","connectioncreated","connectionremove","connectionremoved","translatenode","nodetranslate","nodetranslated","nodedraged","nodedragged","selectnode","multiselectnode","nodeselect","nodeselected","rendernode","rendersocket","rendercontrol","renderconnection","updateconnection","keydown","keyup","translated","zoomed","mousemove","contextmenu","process","clear","NodeEditor","selectNode","selected","each","n","addNode","removeNode","connectTo","remove","add","editor","_this3","checking","validate","silent","beforeImport","Promise","all","keys","_this4","getComponent","fromJSON","jsonNode","jsonConnection","nodeId","targetOutput","targetInput","connect","afterImport","Output","compatibleWith","some","Socket","compatible","Recursion","acc","nodesData","b","inputNodes","array2","inters","value","l","inter","findSelf","extractInputNodes","State","EngineEvents","Engine","engine","register","message","abort","processDone","state","onAbort","ret","res","unlockPool","busy","outputData","a","conns","prevNode","processNode","connData","extractInputData","inputData","worker","args","lock","processWorker","unlock","nextNode","forwardProcess","assign","recursion","throwError","recurrentNode","detect","startNode","i","startId","processStart","copy","processStartNode","processUnreachable","log"],"mappings":"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"}